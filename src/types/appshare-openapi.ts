/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  [path: `/api/rest/code-files/${string}`]: {
    /**
     * UpdateCodeFile 
     * @description Update code file***
     * The GraphQl query for this endpoint is:
     * ``` graphql
     * mutation UpdateCodeFile($id: uuid!, $fileFid: uuid) {
     *   update_codeFiles_by_pk(pk_columns: {id: $id}, _set: {fileFid: $fileFid}) {
     *     id
     *     fileFid
     *   }
     * }
     * ```
     */
    patch: {
      parameters: {
        query?: {
          fileFid?: string;
        };
        header?: {
          /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
          "x-hasura-admin-secret"?: string;
        };
        path: {
          /** @description _"id" is required (enter it either in parameters or request body)_ */
          id: string;
        };
      };
      /** @description Query parameters can also be provided in the request body as a JSON object */
      requestBody?: {
        content: {
          "application/json": {
            fileFid?: components["schemas"]["uuid"];
            id?: components["schemas"]["uuid!"];
          };
        };
      };
      responses: {
        /** @description Responses for PATCH /api/rest/code-files/{id} */
        200: {
          content: {
            "application/json": {
              /**
               * codeFiles 
               * @description columns and relationships of "appshare.code_files"
               */
              update_codeFiles_by_pk?: {
                fileFid?: components["schemas"]["uuid"];
                id?: components["schemas"]["uuid!"];
              } | null;
            };
          };
        };
      };
    };
  };
  [path: `/api/rest/user/${string}/apps`]: {
    /**
     * UserApps 
     * @description Get user apps***
     * The GraphQl query for this endpoint is:
     * ``` graphql
     * query UserApps($id: uuid!) {
     *   apps(where: {userId: {_eq: $id}}) {
     *     id
     *     name
     *     codebases {
     *       id
     *       codeFileId
     *     }
     *   }
     * }
     * ```
     */
    get: {
      parameters: {
        header?: {
          /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
          "x-hasura-admin-secret"?: string;
        };
        path: {
          /** @description _"id" is required (enter it either in parameters or request body)_ */
          id: string;
        };
      };
      /** @description Query parameters can also be provided in the request body as a JSON object */
      requestBody?: {
        content: {
          "application/json": {
            id?: components["schemas"]["uuid!"];
          };
        };
      };
      responses: {
        /** @description Responses for GET /api/rest/user/{id}/apps */
        200: {
          content: {
            "application/json": {
              apps?: ({
                  codebases?: ({
                      codeFileId?: components["schemas"]["uuid!"];
                      id?: components["schemas"]["uuid!"];
                    })[];
                  id?: components["schemas"]["uuid!"];
                  /** String */
                  name?: string;
                })[];
            };
          };
        };
      };
    };
  };
  [path: `/api/rest/apps/codebases/${string}`]: {
    /**
     * UpdateAppCodebase 
     * @description Update app codebase***
     * The GraphQl query for this endpoint is:
     * ``` graphql
     * mutation UpdateAppCodebase($codebaseId: uuid!, $codeFileId: uuid) {
     *   update_appCodebases_by_pk(pk_columns: {id: $codebaseId}, _set: {codeFileId: $codeFileId}) {
     *     id
     *     codeFileId
     *   }
     * }
     * ```
     */
    patch: {
      parameters: {
        query?: {
          codeFileId?: string;
        };
        header?: {
          /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
          "x-hasura-admin-secret"?: string;
        };
        path: {
          /** @description _"codebaseId" is required (enter it either in parameters or request body)_ */
          codebaseId: string;
        };
      };
      /** @description Query parameters can also be provided in the request body as a JSON object */
      requestBody?: {
        content: {
          "application/json": {
            codeFileId?: components["schemas"]["uuid"];
            codebaseId?: components["schemas"]["uuid!"];
          };
        };
      };
      responses: {
        /** @description Responses for PATCH /api/rest/apps/codebases/{codebaseId} */
        200: {
          content: {
            "application/json": {
              /**
               * appCodebases 
               * @description columns and relationships of "appshare.app_codebases"
               */
              update_appCodebases_by_pk?: {
                codeFileId?: components["schemas"]["uuid!"];
                id?: components["schemas"]["uuid!"];
              } | null;
            };
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** uuid */
    "uuid!": string;
    /** uuid */
    uuid: string | null;
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
